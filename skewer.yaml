title: Skupper Hello World using Podman
subtitle: Connect services running as Podman containers
github_actions_url: https://github.com/ssorj/skupper-example-podman/actions/workflows/main.yaml
overview: |
  This example is a basic multi-service HTTP application deployed
  across a Kubernetes cluster and a bare-metal host or VM running
  Podman containers.

  It contains two services:

  * A backend service that exposes an `/api/hello` endpoint.  It
    returns greetings of the form `Hi, <your-name>.  I am <my-name>
    (<container>)`.

  * A frontend service that sends greetings to the backend and
    fetches new greetings in response.

  With Skupper, you can run the backend as a container on your local
  machine and the frontend in Kubernetes and maintain connectivity
  between the two services without exposing the backend to the public
  internet.

  <!-- <img src="images/entities.svg" width="640"/> -->
prerequisites: |
  * A working installation of Podman ([installation
    guide][install-podman])

  * The `kubectl` command-line tool, version 1.15 or later
    ([installation guide][install-kubectl])

  * Access to a Kubernetes cluster, from [any provider you
    choose][kube-providers]

  [install-podman]: https://podman.io/getting-started/installation
  [install-kubectl]: https://kubernetes.io/docs/tasks/tools/install-kubectl/
  [kube-providers]: https://skupper.io/start/kubernetes.html
sites:
  kubernetes:
    title: Kubernetes
    platform: kubernetes
    namespace: hello-world
    env:
      KUBECONFIG: ~/.kube/config-hello-world
  podman:
    title: Podman
    platform: podman
    env:
      SKUPPER_PLATFORM: podman
steps:
  - standard: install_the_skupper_command_line_tool
  - title: Access your Kubernetes cluster
    preamble: |
      The procedure for accessing a Kubernetes cluster varies by
      provider. [Find the instructions for your chosen
      provider][kube-providers] and use them to authenticate and
      configure access.
  - title: Configure separate console sessions
    commands:
      kubernetes:
        - run: export KUBECONFIG=@kubeconfig@
      podman:
        - run: export SKUPPER_PLATFORM=podman
  - title: Set up your Kubernetes namespace
    preamble: |
      Use `kubectl create namespace` to create the namespace you wish
      to use (or use an existing namespace).  Use `kubectl config
      set-context` to set the current namespace for your session.
    commands:
      kubernetes:
        - run: kubectl create namespace hello-world
          output: namespace/hello-world created
        - run: kubectl config set-context --current --namespace hello-world
          output: Context "minikube" modified.
  - title: Set up your Podman environment
    commands:
      podman:
        - run: podman system service --time 0 unix:///run/user/1001/podman/podman.sock &
  - title: Install Skupper in your sites
    commands:
      kubernetes:
        - run: skupper init --enable-console --enable-flow-collector
      podman:
        - run: skupper init --ingress none
  - title: Link your sites
    commands:
      kubernetes:
        - run: skupper token create ~/secret.token
      podman:
        - run: skupper link create ~/secret.token
  - title: Deploy the frontend and backend services
    preamble: |
      For this example, we are running the frontend on Kubernetes and
      the backend as a local Podman container.

      Use `kubectl create deployment` to deploy the frontend service
      in `hello-world`.

      Use `docker run` or `podman run` to run the backend service on
      your local machine.
    commands:
      kubernetes:
        - run: kubectl create deployment frontend --image quay.io/skupper/hello-world-frontend
          output: deployment.apps/frontend created
      podman:
        - run: podman run --name backend-target --network skupper --detach --rm -p 8080:8080 quay.io/skupper/hello-world-backend
          output: |
            262dde0287af2c76c3088d9ff4f865f02732a762b0afd91e03ec9e3fe6b03f88
  - title: Expose the backend service
    preamble: |
      Use `skupper service create` to define a Skupper service called
      `backend`.  Then use `skupper gateway bind` to attach your
      running backend process as a target for the service.
    commands:
      kubernetes:
        - run: skupper service create backend 8080
        - await: service/backend
      podman:
        - run: skupper service create backend 8080
        - run: skupper service bind backend host backend-target --target-port 8080
  - title: Expose the frontend service
    preamble: |
      We have established connectivity between the Kubernetes
      namespace and the your local machine, and we've made the backend
      in `hello-world` available to the frontend running as container.
      Before we can test the application, we need external access to
      the frontend.

      Use `kubectl expose` with `--type LoadBalancer` to open network
      access to the frontend service.
    commands:
      kubernetes:
        - await: deployment/frontend
        - run: kubectl expose deployment/frontend --port 8080 --type LoadBalancer
          output: service/frontend exposed
  - standard: cleaning_up
    commands:
      kubernetes:
        - run: skupper delete
        - run: kubectl delete service/frontend
        - run: kubectl delete deployment/frontend
      podman:
        - run: skupper delete
